buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    gradlePluginPortal()
    mavenLocal()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
  }
  dependencies {
    // --- AÑADIDO ---
    // 1. Se añade el plugin de JavaFX al classpath para que Gradle lo conozca
    classpath 'org.openjfx:javafx-plugin:0.0.13'
  }
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects) {
  apply plugin: 'java-library'

  // --- AÑADIDO ---
  // 2. Se aplica el plugin de JavaFX a todos los submódulos
  apply plugin: 'org.openjfx.javafxplugin'

  // 3. Se define la compatibilidad de Java (source y target)
  sourceCompatibility = 11
  targetCompatibility = 11 // <-- Añadido para asegurar la compilación a Java 11

  // 4. Se configura JavaFX
  javafx {
    version = "11.0.2" // Versión de JavaFX compatible con JDK 11
    // Añade aquí los módulos de JavaFX que tu proyecto utiliza
    modules = [ 'javafx.controls', 'javafx.fxml' ]
  }
  // --- FIN DE CAMBIOS ---


  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
  // The article can be helpful when using assets.txt in your project.
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    // projectFolder/assets
    File assetsFolder = new File("${project.rootDir}/assets/")
    // projectFolder/assets/assets.txt
    File assetsFile = new File(assetsFolder, "assets.txt")
    // delete that file in case we've already created it
    assetsFile.delete()

    // iterate through all files inside that folder
    // convert it to a relative path
    // and append it to the file assets.txt
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.each {
      assetsFile.append(it + "\n")
    }
  }
  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }
}

subprojects {
  version = '$projectVersion'
  ext.appName = 'SpaceNav2024'
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    // You may want to remove the following line if you have errors downloading dependencies.
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
  }
}

eclipse.project.name = 'SpaceNav2024' + '-parent'
